#version 430 core

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(r32ui, binding = 0) uniform restrict readonly uimage2D Vectorscope;
layout(rgba16f, binding = 1) uniform restrict writeonly image2D Image;

vec2 toUV(ivec2 coord, ivec2 imageSize)
{
    return vec2(coord.xy) / vec2(imageSize);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec2 getAngleLength(vec2 xy)
{
    return vec2(atan(xy.y, xy.x) / 6.28, length(xy));
}

void main(void)
{
    // Any pixels outside of the texture
    //if (any(gl_GlobalInvocationID.xy > uvec2(imageSize(Scene)))) return;
    ivec2 xy = ivec2(gl_GlobalInvocationID.xy);

    vec2 uv = toUV(xy, imageSize(Vectorscope));
    vec2 angleLength = getAngleLength(uv * 2 - 1);

    uint value = imageLoad(Vectorscope, xy).r;

    float v = (value / (value + 1.0)) + 0.08;

    vec3 rgb = hsv2rgb( vec3( angleLength, v ) );

    imageStore(Image, xy, vec4(rgb, 1.0));
}